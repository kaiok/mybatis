<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kais.resultMap.mapper.EmployeeMapper">
    <!--
        resultMap: 自定义结果集映射规则
            id: 唯一标识, 方便被引用
            type: 映射到的实体类的全类名
     -->
    <resultMap id="employee" type="com.kais.resultMap.pojo.Employee">
        <!--
            id: 映射实体类中与主键对应的属性
                column: 主键列的列名
                property: 主键列对应(实体类)的属性
         -->
        <id property="userId" column="id"/>

        <!-- result: 映射普通属性 -->
        <result property="lastName" column="last_name"/>
        <result property="userEmail" column="email"/>
    </resultMap>
    <!--
        如果javaBen属性名和列名不一致, 不应该再使用resultType配置返回值类型
        而是使用resultMap引用自定义的结果集映射规则
     -->
    <select id="getAll" resultMap="employee">
        select * from employee
    </select>


    <!--resultMap进阶用法-->
    <!--
场景一：
    查询Employee的同时查询员工对应的部门
    Employee===Department
    设置主外键关联：ALTER TABLE employee ADD CONSTRAINT fk_emp_dept
          FOREIGN KEY(d_id) REFERENCES department(id)
    一个员工有与之对应的部门信息；
    userId  last_name  gender    d_id     did  dept_name (private Department dept;)
 -->
    <!--
        联合查询：级联属性封装结果集
      -->
    <resultMap type="com.kais.resultMap.pojo.Employee" id="MyDifEmp">
        <id column="id" property="userId"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="d_id" property="dept.id"/>
        <result column="department_name" property="dept.departmentName"/>
    </resultMap>
    <!--  public Employee getEmpAndDept(Integer id);-->
    <select id="getEmpAndDept" resultMap="MyDifEmp">
		SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id,
		d.id id,d.department_name department_name FROM employee e,department d
		WHERE e.d_id=d.id AND e.id=#{id}
	</select>



    <!--使用association定义关联的单个对象的封装规则；-->
    <!--  id  last_name  email   gender    d_id   -->
    <resultMap type="com.kais.resultMap.pojo.Employee" id="MyDifEmp2">
        <id column="id" property="userId"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <!-- association可以指定联合的javaBean对象
		property="dept"：指定哪个属性是联合的对象
		javaType:指定这个属性对象的类型[不能省略]
         -->
        <association property="dept" javaType="com.kais.resultMap.pojo.Department">
            <id column="did" property="id"/>
            <result column="department_name" property="departmentName"/>
        </association>
    </resultMap>



    <!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
    <resultMap id="MyEmpByStep" type="com.kais.resultMap.pojo.Employee">
        <id column="id" property="userId"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="userEmail"/>
        <result column="gender" property="gender"/>
        <!-- association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法
    流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
 -->
        <association property="dept"
                     select="com.kais.resultMap.mapper.DepartmentMapper.getDeptById"
                     column="d_id">
        </association>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpDis">
        select * from employee where id = #{id}
    </select>
    <!-- 可以使用延迟加载（懒加载）；(按需加载)
    Employee==>Dept：
        我们每次查询Employee对象的时候，都将一起查询出来。
        部门信息在我们使用的时候再去查询；
        分段查询的基础之上加上两个配置：
 -->
    <!-- ==================association============================ -->


    <!--
	场景二：
		查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
	 -->
    <!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
    <select id="getEmpsByDeptId" resultType="com.kais.resultMap.pojo.Employee">
		select * from tbl_employee where d_id=#{deptId}
	</select>


    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee：
            如果查出的是女生：就把部门信息查询出来，否则不查询；
            如果是男生，把last_name这一列的值赋值给email;
     -->

    <resultMap type="com.kais.resultMap.pojo.Employee" id="MyEmpDis">
        <id column="id" property="userId"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="userEmail"/>
        <result column="gender" property="gender"/>
        <!--
            column：指定判定的列名
            javaType：列值对应的java类型  -->
        <discriminator javaType="string" column="gender">
            <!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->
            <case value="0" resultType="com.kais.resultMap.pojo.Employee">
                <association property="dept"
                             select="com.kais.resultMap.mapper.DepartmentMapper.getDeptById"
                             column="d_id">
                </association>
            </case>
            <!--男生 ;如果是男生，把last_name这一列的值赋值给email; -->
            <case value="1" resultType="com.kais.resultMap.pojo.Employee">
                <id column="id" property="userId"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="userEmail"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>



</mapper>